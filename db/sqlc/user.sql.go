// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    chat_id,
    username,
    password,
    active
) VALUES (
    $1, $2, $3, $4
) RETURNING chat_id, username, password, active
`

type CreateUserParams struct {
	ChatID   string `json:"chat_id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Active   bool   `json:"active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ChatID,
		arg.Username,
		arg.Password,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ChatID,
		&i.Username,
		&i.Password,
		&i.Active,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT chat_id, username, password, active FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ChatID,
			&i.Username,
			&i.Password,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
